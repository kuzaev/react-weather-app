{"version":3,"sources":["WeatherDayList.jsx","WeatherToday.jsx","Weather.jsx","App.js","index.js"],"names":["daily","console","log","title","bordered","map","day","index","sunrise","Date","toLocaleString","hour","minute","sunset","date","dt","year","month","weekday","pressure","Math","round","Title","level","Paragraph","Text","strong","weather","description","gutter","span","temp","morn","eve","night","humidity","current","currentDate","currentTime","currentPressure","main","currentSunrise","sys","currentSunset","name","feels_like","Weather","Typography","state","currentData","currentIsLoading","data","isLoading","error","positionLatitude","positionLongitude","positionError","this","setState","getLocation","geo","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","getWeather","apiKey","url","axios","get","then","response","catch","xl","offset","status","message","className","WeatherToday","WeatherDayList","React","Component","Content","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8VAGe,cAAgB,IAAbA,EAAY,EAAZA,MAEhB,OADAC,QAAQC,IAAIF,GAEV,kBAAC,IAAD,CAAMG,MAAM,qFAAoBC,UAAU,GACvCJ,EAAMK,KAAI,SAACC,EAAKC,GACf,IAAMC,EAAU,IAAIC,KAAmB,IAAdH,EAAIE,SAAgBE,eAAe,KAAM,CAChEC,KAAM,UACNC,OAAQ,YAGJC,EAAS,IAAIJ,KAAkB,IAAbH,EAAIO,QAAeH,eAAe,KAAM,CAC9DC,KAAM,UACNC,OAAQ,YAGJE,EAAO,IAAIL,KAAc,IAATH,EAAIS,IAAWL,eAAe,KAAM,CACxDM,KAAM,UACNC,MAAO,OACPX,IAAK,UACLY,QAAS,SAGLC,EAAWC,KAAKC,MAAMf,EAAIa,SAAW,MAE3C,OACE,6BACE,kBAAC,IAAWG,MAAZ,CAAkBC,MAAO,GAAIT,GAE7B,kBAAC,IAAWU,UAAZ,KACE,kBAAC,IAAWC,KAAZ,CAAiBC,QAAM,GAAEpB,EAAIqB,QAAQ,GAAGC,cAG1C,kBAAC,IAAD,CAAKC,OAAQ,IACX,kBAAC,IAAD,CAAKC,KAAK,KACR,kBAAC,IAAWN,UAAZ,KACE,kBAAC,IAAWC,KAAZ,kCADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEN,KAAKC,MAAMf,EAAIyB,KAAKC,MAA7C,UAGJ,kBAAC,IAAD,CAAKF,KAAK,KACR,kBAAC,IAAWN,UAAZ,KACE,kBAAC,IAAWC,KAAZ,kCADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEN,KAAKC,MAAMf,EAAIyB,KAAKzB,KAA7C,UAGJ,kBAAC,IAAD,CAAKwB,KAAK,KACR,kBAAC,IAAWN,UAAZ,KACE,kBAAC,IAAWC,KAAZ,wCADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEN,KAAKC,MAAMf,EAAIyB,KAAKE,KAA7C,UAGJ,kBAAC,IAAD,CAAKH,KAAK,KACR,kBAAC,IAAWN,UAAZ,KACE,kBAAC,IAAWC,KAAZ,kCADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEN,KAAKC,MAAMf,EAAIyB,KAAKG,OAA7C,WAKN,kBAAC,IAAD,CAAKL,OAAQ,IACX,kBAAC,IAAD,CAAKC,KAAM,GACT,kBAAC,IAAWN,UAAZ,KACE,kBAAC,IAAWC,KAAZ,8CADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAElB,KAG7B,kBAAC,IAAD,CAAKsB,KAAM,GACT,kBAAC,IAAWN,UAAZ,KACE,kBAAC,IAAWC,KAAZ,wCADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEb,MAK/B,kBAAC,IAAD,CAAKgB,OAAQ,IACX,kBAAC,IAAD,CAAKC,KAAM,GACT,kBAAC,IAAWN,UAAZ,KACE,kBAAC,IAAWC,KAAZ,0DADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEP,EAAzB,+CAGJ,kBAAC,IAAD,CAAKW,KAAM,GACT,kBAAC,IAAWN,UAAZ,KACE,kBAAC,IAAWC,KAAZ,gEADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEpB,EAAI6B,SAA7B,QAKN,kBAAC,IAAD,YCzFG,cAAkB,IAAfC,EAAc,EAAdA,QACVC,EAAc,IAAI5B,KAAkB,IAAb2B,EAAQrB,IAAWL,eAAe,KAAM,CACnEO,MAAO,OACPX,IAAK,UACLY,QAAS,SAGLoB,EAAc,IAAI7B,KAAkB,IAAb2B,EAAQrB,IAAWL,eAAe,KAAM,CACnEC,KAAM,UACNC,OAAQ,YAGJ2B,EAAkBnB,KAAKC,MAAMe,EAAQI,KAAKrB,SAAW,MAErDsB,EAAiB,IAAIhC,KAA2B,IAAtB2B,EAAQM,IAAIlC,SAAgBE,eAAe,KAAM,CAC/EC,KAAM,UACNC,OAAQ,YAGJ+B,EAAgB,IAAIlC,KAA0B,IAArB2B,EAAQM,IAAI7B,QAAeH,eAAe,KAAM,CAC7EC,KAAM,UACNC,OAAQ,YAGV,OACE,kBAAC,IAAD,CAAMT,MAAK,UAAKiC,EAAQQ,KAAb,cAAuBP,GAAejC,UAAU,GACzD,kBAAC,IAAWkB,MAAZ,KAAmBc,EAAQI,KAAKT,KAAhC,QAEA,kBAAC,IAAWP,UAAZ,KACE,kBAAC,IAAWC,KAAZ,6HADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEY,IAG3B,kBAAC,IAAWd,UAAZ,KACE,kBAAC,IAAWC,KAAZ,kFADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEN,KAAKC,MAAMe,EAAQI,KAAKK,YAAjD,SAGF,kBAAC,IAAWrB,UAAZ,KACE,kBAAC,IAAWC,KAAZ,8CADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEe,IAG3B,kBAAC,IAAWjB,UAAZ,KACE,kBAAC,IAAWC,KAAZ,wCADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEiB,IAG3B,kBAAC,IAAWnB,UAAZ,KACE,kBAAC,IAAWC,KAAZ,0DADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEa,EAAzB,8CAGF,kBAAC,IAAWf,UAAZ,KACE,kBAAC,IAAWC,KAAZ,gEADF,OAEE,kBAAC,IAAWA,KAAZ,CAAiBC,QAAM,GAAEU,EAAQI,KAAKL,SAAtC,QCnDaW,GADOC,IAApBvB,UAAoBuB,IAATtB,K,4MAEjBuB,MAAQ,CACNC,YAAa,KACbC,kBAAkB,EAClBC,KAAM,KACNC,WAAW,EACXC,MAAO,KACPC,iBAAkB,KAClBC,kBAAmB,KACnBC,cAAe,M,kEAGI,IAAD,OAClBC,KAAKC,SAAS,CAAEN,WAAW,EAAMF,kBAAkB,IAAQ,WACzD,EAAKS,mB,oCAIM,IAAD,OACNC,EAAMC,UAAUC,YACjBF,EAQLA,EAAIG,oBACF,SAACC,GACC,EAAKN,SACH,CACEO,SAAUD,EAASE,OAAOD,SAC1BE,UAAWH,EAASE,OAAOC,YAE7B,WACE,EAAKC,aACLnE,QAAQC,IAAI8D,SAIlB,SAACX,GACC,EAAKK,SAAS,EAAKA,SAAS,CAAEL,cArBhCI,KAAKT,MAAM,CACTQ,cAAe,wNACfJ,WAAW,M,mCAwBH,IAAD,OACLiB,EAAS,mCACTC,EAAG,8DAA0Db,KAAKT,MAAMiB,SAArE,gBAAqFR,KAAKT,MAAMmB,UAAhG,kBAAmHE,EAAnH,yBACTE,IACGC,IADH,8DAE2Df,KAAKT,MAAMiB,SAFtE,gBAEsFR,KAAKT,MAAMmB,UAFjG,kBAEoHE,EAFpH,0BAIGI,MAAK,SAACC,GAAD,OACJ,EAAKhB,SAAS,CAAET,YAAayB,EAASvB,KAAMD,kBAAkB,IAAS,WACrEjD,QAAQC,IAAI,EAAK8C,MAAMC,mBAG7BsB,IACGC,IAAIF,GACJG,MAAK,SAACC,GAAD,OACJ,EAAKhB,SAAS,CAAEP,KAAMuB,EAASvB,KAAMC,WAAW,IAAS,WACvDnD,QAAQC,IAAI,EAAK8C,MAAMG,YAG1BwB,OAAM,SAACtB,GAAD,OAAW,EAAKK,SAAS,CAAEL,QAAOD,WAAW,S,+BAItD,OAAIK,KAAKT,MAAMK,MAEX,kBAAC,IAAD,CAAKvB,KAAM,GAAI8C,GAAI,CAACC,OAAQ,EAAG/C,KAAM,KACnC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQgD,OAAO,QAAQ3E,MAAOsD,KAAKT,MAAMK,MAAM0B,YAOrD,kBAAC,IAAD,CAAKlD,OAAQ,IACX,kBAAC,IAAD,CAAKC,KAAM,GAAI8C,GAAI,EAAGI,UAAU,YAC7BvB,KAAKT,MAAME,iBACV,kBAAC,IAAD,CAAM9C,UAAU,GACd,kBAAC,IAAD,OAGFqD,KAAKT,MAAMC,aAAe,kBAACgC,EAAD,CAAc7C,QAASqB,KAAKT,MAAMC,eAGhE,kBAAC,IAAD,CAAKnB,KAAM,GAAI8C,GAAI,GAAII,UAAU,YAC9BvB,KAAKT,MAAMI,UACV,kBAAC,IAAD,CAAMhD,UAAU,GACd,kBAAC,IAAD,OAGFqD,KAAKT,MAAMG,MAAQ,kBAAC+B,EAAD,CAAgBlF,MAAOyD,KAAKT,MAAMG,KAAKnD,c,GAjGjCmF,IAAMC,YCFnCC,EAAYC,IAAZD,QAYOE,EAVH,WACV,OACE,kBAAC,IAAD,CAAQP,UAAU,OAChB,kBAACK,EAAD,CAASL,UAAU,gBACjB,kBAAC,EAAD,S,cCLRQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.feb53770.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Divider, Card, Typography, Row, Col } from \"antd\";\r\n\r\nexport default ({ daily }) => {\r\n  console.log(daily);\r\n  return (\r\n    <Card title=\"Прогноз на 7 дней\" bordered={false}>\r\n      {daily.map((day, index) => {\r\n        const sunrise = new Date(day.sunrise * 1000).toLocaleString(\"ru\", {\r\n          hour: \"numeric\",\r\n          minute: \"numeric\",\r\n        });\r\n\r\n        const sunset = new Date(day.sunset * 1000).toLocaleString(\"ru\", {\r\n          hour: \"numeric\",\r\n          minute: \"numeric\",\r\n        });\r\n\r\n        const date = new Date(day.dt * 1000).toLocaleString(\"ru\", {\r\n          year: \"numeric\",\r\n          month: \"long\",\r\n          day: \"numeric\",\r\n          weekday: \"long\",\r\n        });\r\n\r\n        const pressure = Math.round(day.pressure / 1.33);\r\n\r\n        return (\r\n          <div>\r\n            <Typography.Title level={4}>{date}</Typography.Title>\r\n\r\n            <Typography.Paragraph>\r\n              <Typography.Text strong>{day.weather[0].description}</Typography.Text>\r\n            </Typography.Paragraph>\r\n\r\n            <Row gutter={16}>\r\n              <Col span=\"6\">\r\n                <Typography.Paragraph>\r\n                  <Typography.Text>Утро:</Typography.Text>&nbsp;\r\n                  <Typography.Text strong>{Math.round(day.temp.morn)}°</Typography.Text>\r\n                </Typography.Paragraph>\r\n              </Col>\r\n              <Col span=\"6\">\r\n                <Typography.Paragraph>\r\n                  <Typography.Text>День:</Typography.Text>&nbsp;\r\n                  <Typography.Text strong>{Math.round(day.temp.day)}°</Typography.Text>\r\n                </Typography.Paragraph>\r\n              </Col>\r\n              <Col span=\"6\">\r\n                <Typography.Paragraph>\r\n                  <Typography.Text>Вечер:</Typography.Text>&nbsp;\r\n                  <Typography.Text strong>{Math.round(day.temp.eve)}°</Typography.Text>\r\n                </Typography.Paragraph>\r\n              </Col>\r\n              <Col span=\"6\">\r\n                <Typography.Paragraph>\r\n                  <Typography.Text>Ночь:</Typography.Text>&nbsp;\r\n                  <Typography.Text strong>{Math.round(day.temp.night)}°</Typography.Text>\r\n                </Typography.Paragraph>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={6}>\r\n                <Typography.Paragraph>\r\n                  <Typography.Text>Восход:</Typography.Text>&nbsp;\r\n                  <Typography.Text strong>{sunrise}</Typography.Text>\r\n                </Typography.Paragraph>\r\n              </Col>\r\n              <Col span={6}>\r\n                <Typography.Paragraph>\r\n                  <Typography.Text>Закат:</Typography.Text>&nbsp;\r\n                  <Typography.Text strong>{sunset}</Typography.Text>\r\n                </Typography.Paragraph>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={6}>\r\n                <Typography.Paragraph>\r\n                  <Typography.Text>Давление:</Typography.Text>&nbsp;\r\n                  <Typography.Text strong>{pressure} мм рт. ст.</Typography.Text>\r\n                </Typography.Paragraph>\r\n              </Col>\r\n              <Col span={6}>\r\n                <Typography.Paragraph>\r\n                  <Typography.Text>Влажность:</Typography.Text>&nbsp;\r\n                  <Typography.Text strong>{day.humidity}%</Typography.Text>\r\n                </Typography.Paragraph>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Divider></Divider>\r\n          </div>\r\n        );\r\n      })}\r\n    </Card>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card, Typography} from \"antd\";\r\n\r\nexport default ({ current }) => {\r\n  const currentDate = new Date(current.dt * 1000).toLocaleString(\"ru\", {\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n    weekday: \"long\"\r\n  });\r\n\r\n  const currentTime = new Date(current.dt * 1000).toLocaleString(\"ru\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n  });\r\n\r\n  const currentPressure = Math.round(current.main.pressure / 1.33);\r\n\r\n  const currentSunrise = new Date(current.sys.sunrise * 1000).toLocaleString(\"ru\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n  });\r\n\r\n  const currentSunset = new Date(current.sys.sunset * 1000).toLocaleString(\"ru\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n  });\r\n\r\n  return (\r\n    <Card title={`${current.name} | ${currentDate}`} bordered={false}>\r\n      <Typography.Title>{current.main.temp}°</Typography.Title>\r\n\r\n      <Typography.Paragraph>\r\n        <Typography.Text>Последнее обновление:</Typography.Text>&nbsp;\r\n        <Typography.Text strong>{currentTime}</Typography.Text>\r\n      </Typography.Paragraph>\r\n\r\n      <Typography.Paragraph>\r\n        <Typography.Text>Ощущается как</Typography.Text>&nbsp;\r\n        <Typography.Text strong>{Math.round(current.main.feels_like)}°</Typography.Text>\r\n      </Typography.Paragraph>\r\n\r\n      <Typography.Paragraph>\r\n        <Typography.Text>Восход:</Typography.Text>&nbsp;\r\n        <Typography.Text strong>{currentSunrise}</Typography.Text>\r\n      </Typography.Paragraph>\r\n\r\n      <Typography.Paragraph>\r\n        <Typography.Text>Закат:</Typography.Text>&nbsp;\r\n        <Typography.Text strong>{currentSunset}</Typography.Text>\r\n      </Typography.Paragraph>\r\n\r\n      <Typography.Paragraph>\r\n        <Typography.Text>Давление:</Typography.Text>&nbsp;\r\n        <Typography.Text strong>{currentPressure} мм рт. ст.</Typography.Text>\r\n      </Typography.Paragraph>\r\n\r\n      <Typography.Paragraph>\r\n        <Typography.Text>Влажность:</Typography.Text>&nbsp;\r\n        <Typography.Text strong>{current.main.humidity}%</Typography.Text>\r\n      </Typography.Paragraph>\r\n\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Col, Card, Spin, Result, Typography, Row } from \"antd\";\r\nimport WeatherDayList from \"./WeatherDayList\";\r\nimport WeatherToday from \"./WeatherToday\";\r\n\r\nconst { Paragraph, Text } = Typography;\r\nexport default class Weather extends React.Component {\r\n  state = {\r\n    currentData: null,\r\n    currentIsLoading: false,\r\n    data: null,\r\n    isLoading: false,\r\n    error: null,\r\n    positionLatitude: null,\r\n    positionLongitude: null,\r\n    positionError: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true, currentIsLoading: true }, () => {\r\n      this.getLocation();\r\n    });\r\n  }\r\n\r\n  getLocation() {\r\n    const geo = navigator.geolocation;\r\n    if (!geo) {\r\n      this.state({\r\n        positionError: \"Геолокация не поддреживается браузером\",\r\n        isLoading: false,\r\n      });\r\n      return;\r\n    }\r\n\r\n    geo.getCurrentPosition(\r\n      (position) => {\r\n        this.setState(\r\n          {\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n          },\r\n          () => {\r\n            this.getWeather();\r\n            console.log(position);\r\n          }\r\n        );\r\n      },\r\n      (error) => {\r\n        this.setState(this.setState({ error }));\r\n      }\r\n    );\r\n  }\r\n\r\n  getWeather() {\r\n    const apiKey = \"0b7245384d6c369243e321ae9b3651e4\";\r\n    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${apiKey}&lang=ru&units=metric`;\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${apiKey}&lang=ru&units=metric`\r\n      )\r\n      .then((response) =>\r\n        this.setState({ currentData: response.data, currentIsLoading: false }, () => {\r\n          console.log(this.state.currentData);\r\n        })\r\n      );\r\n    axios\r\n      .get(url)\r\n      .then((response) =>\r\n        this.setState({ data: response.data, isLoading: false }, () => {\r\n          console.log(this.state.data);\r\n        })\r\n      )\r\n      .catch((error) => this.setState({ error, isLoading: false }));\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return (\r\n        <Col span={24} xl={{offset: 6, span: 12}}>\r\n          <Card>\r\n            <Result status=\"error\" title={this.state.error.message} />\r\n          </Card>\r\n        </Col>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Row gutter={16}>\r\n        <Col span={24} xl={7} className=\"app__col\">\r\n          {this.state.currentIsLoading ? (\r\n            <Card bordered={false}>\r\n              <Spin />\r\n            </Card>\r\n          ) : (\r\n            this.state.currentData && <WeatherToday current={this.state.currentData} />\r\n          )}\r\n        </Col>\r\n        <Col span={24} xl={17} className=\"app__col\">\r\n          {this.state.isLoading ? (\r\n            <Card bordered={false}>\r\n              <Spin />\r\n            </Card>\r\n          ) : (\r\n            this.state.data && <WeatherDayList daily={this.state.data.daily} />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport {Layout} from \"antd\";\n\nimport Weather from \"./Weather\";\n\nconst { Content } = Layout;\n\nconst App = () => {\n  return (\n    <Layout className=\"app\">\n      <Content className=\"app__content\">\n        <Weather />\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}