{"version":3,"sources":["WeatherDayList.jsx","WeatherToday.jsx","App.js","index.js"],"names":["WeatherDayList","state","data","error","isLoading","this","props","positionLatitude","positionLongitude","apiKey","url","axios","get","then","response","setState","daily","catch","status","title","message","bordered","map","day","sunrise","Date","toLocaleString","hour","minute","sunset","date","dt","year","month","weekday","pressure","Math","round","key","Title","level","Paragraph","Text","strong","weather","description","gutter","span","xl","temp","morn","eve","night","humidity","React","Component","WeatherTody","currentDate","currentTime","currentPressure","main","currentSunrise","sys","currentSunset","name","feels_like","Content","Layout","App","positionError","getLocation","geo","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","className","size","delay","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5225e2da.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Divider, Card, Typography, Row, Col, Result, Spin } from \"antd\";\r\n\r\nexport default class WeatherDayList extends React.Component {\r\n  state = {\r\n    data: null,\r\n    error: null,\r\n    isLoading: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { positionLatitude, positionLongitude, apiKey } = this.props;\r\n    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${positionLatitude}&lon=${positionLongitude}&appid=${apiKey}&lang=ru&units=metric`;\r\n    axios\r\n      .get(url)\r\n      .then((response) => this.setState({ data: response.data.daily, isLoading: false }))\r\n      .catch((error) => this.setState({ error, isLoading: false }));\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, data, error } = this.state;\r\n\r\n    if (isLoading) {\r\n      return (\r\n        <Card>\r\n          <Spin />\r\n        </Card>\r\n      );\r\n    }\r\n\r\n    if (error) {\r\n      return <Result status=\"error\" title={error.message} />;\r\n    }\r\n\r\n    return (\r\n      <Card title=\"Прогноз на 7 дней\" bordered={false}>\r\n        {data.map((day) => {\r\n          const sunrise = new Date(day.sunrise * 1000).toLocaleString(\"ru\", {\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n          });\r\n\r\n          const sunset = new Date(day.sunset * 1000).toLocaleString(\"ru\", {\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n          });\r\n\r\n          const date = new Date(day.dt * 1000).toLocaleString(\"ru\", {\r\n            year: \"numeric\",\r\n            month: \"long\",\r\n            day: \"numeric\",\r\n            weekday: \"long\",\r\n          });\r\n\r\n          const pressure = Math.round(day.pressure / 1.33);\r\n\r\n          return (\r\n            <div key={day.dt}>\r\n              <Typography.Title level={4}>{date}</Typography.Title>\r\n\r\n              <Typography.Paragraph>\r\n                <Typography.Text strong>{day.weather[0].description}</Typography.Text>\r\n              </Typography.Paragraph>\r\n\r\n              <Row gutter={16}>\r\n                <Col span={24} xl={6}>\r\n                  <Typography.Paragraph>\r\n                    <Typography.Text>Утро:</Typography.Text>&nbsp;\r\n                    <Typography.Text strong>{Math.round(day.temp.morn)}°</Typography.Text>\r\n                  </Typography.Paragraph>\r\n                </Col>\r\n                <Col span={24} xl={6}>\r\n                  <Typography.Paragraph>\r\n                    <Typography.Text>День:</Typography.Text>&nbsp;\r\n                    <Typography.Text strong>{Math.round(day.temp.day)}°</Typography.Text>\r\n                  </Typography.Paragraph>\r\n                </Col>\r\n                <Col span={24} xl={6}>\r\n                  <Typography.Paragraph>\r\n                    <Typography.Text>Вечер:</Typography.Text>&nbsp;\r\n                    <Typography.Text strong>{Math.round(day.temp.eve)}°</Typography.Text>\r\n                  </Typography.Paragraph>\r\n                </Col>\r\n                <Col span={24} xl={6}>\r\n                  <Typography.Paragraph>\r\n                    <Typography.Text>Ночь:</Typography.Text>&nbsp;\r\n                    <Typography.Text strong>{Math.round(day.temp.night)}°</Typography.Text>\r\n                  </Typography.Paragraph>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row gutter={16}>\r\n                <Col span={24} xl={6}>\r\n                  <Typography.Paragraph>\r\n                    <Typography.Text>Восход:</Typography.Text>&nbsp;\r\n                    <Typography.Text strong>{sunrise}</Typography.Text>\r\n                  </Typography.Paragraph>\r\n                </Col>\r\n                <Col span={24} xl={6}>\r\n                  <Typography.Paragraph>\r\n                    <Typography.Text>Закат:</Typography.Text>&nbsp;\r\n                    <Typography.Text strong>{sunset}</Typography.Text>\r\n                  </Typography.Paragraph>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row gutter={16}>\r\n                <Col span={24} xl={6}>\r\n                  <Typography.Paragraph>\r\n                    <Typography.Text>Давление:</Typography.Text>&nbsp;\r\n                    <Typography.Text strong>{pressure} мм рт. ст.</Typography.Text>\r\n                  </Typography.Paragraph>\r\n                </Col>\r\n                <Col span={24} xl={6}>\r\n                  <Typography.Paragraph>\r\n                    <Typography.Text>Влажность:</Typography.Text>&nbsp;\r\n                    <Typography.Text strong>{day.humidity}%</Typography.Text>\r\n                  </Typography.Paragraph>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Divider></Divider>\r\n            </div>\r\n          );\r\n        })}\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Card, Typography, Spin, Result } from \"antd\";\r\n\r\nexport default class WeatherTody extends React.Component {\r\n  state = {\r\n    data: null,\r\n    error: null,\r\n    isLoading: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const {positionLatitude, positionLongitude, apiKey} = this.props;\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${positionLatitude}&lon=${positionLongitude}&appid=${apiKey}&lang=ru&units=metric`;\r\n    axios\r\n      .get(url)\r\n      .then((response) => this.setState({ data: response.data, isLoading: false }))\r\n      .catch((error) => this.setState({ error, isLoading: false }));\r\n  }\r\n\r\n  render() {\r\n    const {isLoading, data, error } = this.state;\r\n\r\n    if (isLoading) {\r\n      return (\r\n        <Card>\r\n          <Spin />\r\n        </Card>\r\n      );\r\n    }\r\n\r\n    if (error) {\r\n      return <Result status=\"error\" title={error.message} />;\r\n    }\r\n\r\n    const currentDate = new Date(data.dt * 1000).toLocaleString(\"ru\", {\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n      weekday: \"long\",\r\n    });\r\n\r\n    const currentTime = new Date(data.dt * 1000).toLocaleString(\"ru\", {\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    });\r\n\r\n    const currentPressure = Math.round(data.main.pressure / 1.33);\r\n\r\n    const currentSunrise = new Date(data.sys.sunrise * 1000).toLocaleString(\"ru\", {\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    });\r\n\r\n    const currentSunset = new Date(data.sys.sunset * 1000).toLocaleString(\"ru\", {\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    });\r\n\r\n    return (\r\n      <Card title={`${data.name} | ${currentDate}`} bordered={false}>\r\n        <Typography.Title>{data.main.temp}°</Typography.Title>\r\n\r\n        <Typography.Paragraph>\r\n          <Typography.Text>Последнее обновление:</Typography.Text>&nbsp;\r\n          <Typography.Text strong>{currentTime}</Typography.Text>\r\n        </Typography.Paragraph>\r\n\r\n        <Typography.Paragraph>\r\n          <Typography.Text>Ощущается как</Typography.Text>&nbsp;\r\n          <Typography.Text strong>{Math.round(data.main.feels_like)}°</Typography.Text>\r\n        </Typography.Paragraph>\r\n\r\n        <Typography.Paragraph>\r\n          <Typography.Text>Восход:</Typography.Text>&nbsp;\r\n          <Typography.Text strong>{currentSunrise}</Typography.Text>\r\n        </Typography.Paragraph>\r\n\r\n        <Typography.Paragraph>\r\n          <Typography.Text>Закат:</Typography.Text>&nbsp;\r\n          <Typography.Text strong>{currentSunset}</Typography.Text>\r\n        </Typography.Paragraph>\r\n\r\n        <Typography.Paragraph>\r\n          <Typography.Text>Давление:</Typography.Text>&nbsp;\r\n          <Typography.Text strong>{currentPressure} мм рт. ст.</Typography.Text>\r\n        </Typography.Paragraph>\r\n\r\n        <Typography.Paragraph>\r\n          <Typography.Text>Влажность:</Typography.Text>&nbsp;\r\n          <Typography.Text strong>{data.main.humidity}%</Typography.Text>\r\n        </Typography.Paragraph>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { Layout, Spin, Result, Col, Row } from \"antd\";\n\nimport WeatherDayList from \"./WeatherDayList\";\nimport WeatherToday from \"./WeatherToday\";\n\nconst { Content } = Layout;\n\nexport default class App extends React.Component {\n  state = {\n    positionLatitude: null,\n    positionLongitude: null,\n    positionError: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.getLocation();\n  }\n\n  getLocation() {\n    const geo = navigator.geolocation;\n    if (!geo) {\n      this.state({\n        positionError: \"Геолокация не поддреживается браузером\",\n        isLoading: false,\n      });\n      return;\n    }\n    geo.getCurrentPosition(\n      (position) => {\n        this.setState({\n          positionLatitude: position.coords.latitude,\n          positionLongitude: position.coords.longitude,\n          isLoading: false,\n        });\n      },\n      (error) => {\n        this.setState({ positionError: error, isLoading: false });\n      }\n    );\n  }\n\n  render() {\n    const { positionLatitude, positionLongitude, isLoading, positionError } = this.state;\n    const apiKey = \"0b7245384d6c369243e321ae9b3651e4\";\n\n    return (\n      <Layout className=\"app\">\n        <Content className=\"app__content\">\n          {isLoading && !positionError && (\n            <div className=\"app__loader\">\n              <Spin size=\"large\" delay={500} />\n            </div>\n          )}\n\n          {!isLoading && positionError && <Result status=\"error\" title={positionError.message} />}\n\n          {!isLoading && !positionError && (\n            <Row gutter={16}>\n              <Col span={24} xl={7} className=\"app__col\">\n                <WeatherToday\n                  positionLatitude={positionLatitude}\n                  positionLongitude={positionLongitude}\n                  apiKey={apiKey}\n                />\n              </Col>\n              <Col span={24} xl={17} className=\"app__col\">\n                <WeatherDayList\n                  positionLatitude={positionLatitude}\n                  positionLongitude={positionLongitude}\n                  apiKey={apiKey}\n                />\n              </Col>\n            </Row>\n          )}\n        </Content>\n      </Layout>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}